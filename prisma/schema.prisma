// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UnitType {
    mass
    volume
    pieces
    custom
}

model Recipe {
    id                 String               @id @unique @default(cuid())
    name               String
    desc               String?
    prepTime           Int?
    cookTime           Int?
    servings           Int
    steps              String[]
    tags               Tag[]
    ingredientOnRecipe IngredientOnRecipe[]
    recipeOnShoplist   RecipeOnShoplist[]
    user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId             String
}

model Ingredient {
    id                 String               @id @unique @default(cuid())
    name               String
    unitType           UnitType
    customUnitNames    String[]
    ingredientOnRecipe IngredientOnRecipe[]
    user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId             String
}

model IngredientOnRecipe {
    id           String     @id @unique @default(cuid())
    recipe       Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
    ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
    quantity     Float
    unit         String
    recipeId     String
    ingredientId String

    @@unique([recipeId, ingredientId])
}

model Tag {
    id      String   @id @unique @default(cuid())
    name    String
    recipes Recipe[]
    user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  String
}

model Shoplist {
    id               String             @id @unique @default(cuid())
    createdAt        DateTime
    name             String?
    recipeOnShoplist RecipeOnShoplist[]
    user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId           String
}

model RecipeOnShoplist {
    id         String   @id @unique @default(cuid())
    recipe     Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
    shoplist   Shoplist @relation(fields: [shoplistId], references: [id], onDelete: Cascade)
    amount     Float
    recipeId   String
    shoplistId String
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    recipes     Recipe[]
    ingredients Ingredient[]
    tags        Tag[]
    shiplists   Shoplist[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
